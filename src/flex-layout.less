@prefix          : flex;
@grid-columns    : 12;
@grid-gutter     : 1rem;
@screen-xs       : 480px;
@screen-sm       : 768px;
@screen-md       : 992px;
@screen-lg       : 1200px;
@screen-list     : xs, sm, md, lg;

*,
*:before,
*:after {
    -webkit-box-sizing: border-box;
            box-sizing: border-box;
}

.@{prefix}-row,
.@{prefix}-column {
    display: flex;
    flex-wrap: wrap;
    &.@{prefix}-norwap {
        flex-wrap: no-wrap;
    }
    &.@{prefix}-rewrap {
        flex-wrap: wrap-reverse;
    }
    &.@{prefix}-between {
		justify-content: space-between;
	}
    &.@{prefix}-around {
		justify-content: space-around;
    }
    > .@{prefix}-first {
        order: -1;
    }
    > .@{prefix}-last {
        order: 1;
    }
}

.@{prefix}-row {
    flex-direction: row;
    // margin-left: (@grid-gutter / -2);
    // margin-right: (@grid-gutter / -2);
    // > * {
    //     padding-left:  (@grid-gutter / 2);
    //     padding-right: (@grid-gutter / 2);
    // }
    &.@{prefix}-reverse {
        flex-direction: row-reverse;
    }
    &.@{prefix}-left {
		justify-content: flex-start;
	}
	&.@{prefix}-right {
		justify-content: flex-end;
	}
	&.@{prefix}-top {
		align-items: flex-start;
	}
	&.@{prefix}-bottom {
		align-items: flex-end;
	}
	&.@{prefix}-center {
		justify-content: center;
	}
	&.@{prefix}-middle {
		align-items: center;
	}

}

.@{prefix}-column {
    flex-direction: column;
    &.@{prefix}-reverse {
        flex-direction: column-reverse;
    }
    &.@{prefix}-left {
		align-items: flex-start;
	}
	&.@{prefix}-right {
		align-items: flex-end;
	}
	&.@{prefix}-top {
		justify-content: flex-start;
	}
	&.@{prefix}-bottom {
		justify-content: flex-end;
	}
	&.@{prefix}-center {
		align-items: center;
	}
    &.@{prefix}-middle {
		justify-content: center;
	}
}

.make-grid(xs);
// .make-grid-columns();

@media (min-width: @screen-sm) {
    .make-grid(sm);
}

@media (min-width: @screen-md) {
    .make-grid(md);
}

@media (min-width: @screen-lg) {
    .make-grid(lg);
}

.make-grid(@class) {
    .loop-grid(1, @class, width);
    .loop-grid(1, @class, offset);
}

.loop-grid(@index, @class, @type) when (@index =< @grid-columns) {
    .calc-grid(@index, @class, @type);
    .loop-grid((@index + 1), @class, @type);
}

.calc-grid(@index, @class, @type) when (@type = width) {
    .@{prefix}-@{class}-@{index} {
        flex-basis: percentage((@index / @grid-columns));
        max-width: percentage((@index / @grid-columns));
    }
}

.calc-grid(@index, @class, @type) when (@type = offset) {
    .@{prefix}-@{class}-offset-@{index} {
        margin-left: percentage((@index / @grid-columns));
    }
}

.make-grid-columns() {
    .col(@index) {
        @item: ~".@{prefix}-xs-@{index}, .@{prefix}-sm-@{index}, .@{prefix}-md-@{index}, .@{prefix}-lg-@{index}";
        .col((@index + 1), @item);
    }
    .col(@index, @list) when (@index =< @grid-columns) {
        @item: ~".@{prefix}-xs-@{index}, .@{prefix}-sm-@{index}, .@{prefix}-md-@{index}, .@{prefix}-lg-@{index}";
        .col((@index + 1), ~"@{list}, @{item}");
    }
    .col(@index, @list) when (@index > @grid-columns) {
        @{list} {
            min-height: 1px;
            padding-left:  (@grid-gutter / 2);
            padding-right: (@grid-gutter / 2);
        }
    }
    .col(1);
}